# Educational Platform API - All Endpoints for Testing
# Base URL: http://localhost:8000/api

# ========================================
# AUTHENTICATION ENDPOINTS
# ========================================

# 1. Register Instructor
POST http://localhost:8000/api/auth/register/
Content-Type: application/json

{
  "email": "instructor@test.com",
  "username": "instructor1",
  "password": "testpass123",
  "confirm_password": "testpass123",
  "role": "instructor",
  "first_name": "John",
  "last_name": "Doe"
}

# 2. Register Student
POST http://localhost:8000/api/auth/register/
Content-Type: application/json

{
  "email": "student@test.com",
  "username": "student1",
  "password": "testpass123",
  "confirm_password": "testpass123",
  "role": "student",
  "first_name": "Jane",
  "last_name": "Smith"
}

# 3. Login Instructor
POST http://localhost:8000/api/auth/login/
Content-Type: application/json

{
  "email": "instructor@test.com",
  "password": "testpass123"
}

# 4. Login Student
POST http://localhost:8000/api/auth/login/
Content-Type: application/json

{
  "email": "student@test.com",
  "password": "testpass123"
}

# ========================================
# QUESTIONS ENDPOINTS
# ========================================

# 5. Create True/False Question (Auto-detected)
POST http://localhost:8000/api/exams/questions/
Content-Type: application/json
Authorization: Bearer YOUR_TOKEN_HERE

{
  "text": "Is this the answer is either True or False? Python is a programming language.",
  "question_type": "multiple_choice",
  "points": 5
}

# 6. Create True/False Question (Alternative format)
POST http://localhost:8000/api/exams/questions/
Content-Type: application/json
Authorization: Bearer YOUR_TOKEN_HERE

{
  "text": "Is the answer True or False? Django is a web framework.",
  "question_type": "multiple_choice",
  "points": 3
}

# 7. Create Multiple Choice Question with Custom Choices
POST http://localhost:8000/api/exams/questions/
Content-Type: application/json
Authorization: Bearer YOUR_TOKEN_HERE

{
  "text": "What is the capital of France?",
  "question_type": "multiple_choice",
  "points": 5,
  "choices": [
    {
      "text": "London",
      "is_correct": false,
      "order": 1
    },
    {
      "text": "Paris",
      "is_correct": true,
      "order": 2
    },
    {
      "text": "Berlin",
      "is_correct": false,
      "order": 3
    },
    {
      "text": "Madrid",
      "is_correct": false,
      "order": 4
    }
  ]
}

# 8. Create Multiple Choice Question with True/False as Options
POST http://localhost:8000/api/exams/questions/
Content-Type: application/json
Authorization: Bearer YOUR_TOKEN_HERE

{
  "text": "Which of the following statements about Python are correct?",
  "question_type": "multiple_choice",
  "points": 10,
  "choices": [
    {
      "text": "Python is an interpreted language",
      "is_correct": true,
      "order": 1
    },
    {
      "text": "Python is a compiled language",
      "is_correct": false,
      "order": 2
    },
    {
      "text": "Python supports object-oriented programming",
      "is_correct": true,
      "order": 3
    },
    {
      "text": "Python is a low-level language",
      "is_correct": false,
      "order": 4
    }
  ]
}

# 9. Create Question with Default True/False (when no choices provided)
POST http://localhost:8000/api/exams/questions/
Content-Type: application/json
Authorization: Bearer YOUR_TOKEN_HERE

{
  "text": "Is JavaScript a programming language?",
  "question_type": "multiple_choice",
  "points": 3
}

# 10. Get Question Details
GET http://localhost:8000/api/exams/questions/1/
Authorization: Bearer YOUR_TOKEN_HERE

# 11. Update Question
PUT http://localhost:8000/api/exams/questions/1/
Content-Type: application/json
Authorization: Bearer YOUR_TOKEN_HERE

{
  "text": "Updated question text",
  "points": 10,
  "choices": [
    {
      "text": "Option A",
      "is_correct": true,
      "order": 1
    },
    {
      "text": "Option B",
      "is_correct": false,
      "order": 2
    }
  ]
}

# 12. Delete Question
DELETE http://localhost:8000/api/exams/questions/1/
Authorization: Bearer YOUR_TOKEN_HERE

# ========================================
# EXAMS ENDPOINTS
# ========================================

# 13. Create Exam
POST http://localhost:8000/api/exams/exams/
Content-Type: application/json
Authorization: Bearer YOUR_TOKEN_HERE

{
  "name": "Python Basics Exam"
}

# 14. Get All Exams
GET http://localhost:8000/api/exams/exams/
Authorization: Bearer YOUR_TOKEN_HERE

# 15. Get Exam Details
GET http://localhost:8000/api/exams/exams/1/
Authorization: Bearer YOUR_TOKEN_HERE

# 16. Update Exam
PUT http://localhost:8000/api/exams/exams/1/
Content-Type: application/json
Authorization: Bearer YOUR_TOKEN_HERE

{
  "name": "Updated Exam Name"
}

# 17. Delete Exam
DELETE http://localhost:8000/api/exams/exams/1/
Authorization: Bearer YOUR_TOKEN_HERE

# 18. Get Questions for an Exam
GET http://localhost:8000/api/exams/exams/1/questions/
Authorization: Bearer YOUR_TOKEN_HERE

# 19. Add Question to Exam
POST http://localhost:8000/api/exams/exams/1/add_question/
Content-Type: application/json
Authorization: Bearer YOUR_TOKEN_HERE

{
  "question_id": 1,
  "order": 1
}

# 20. Remove Question from Exam
DELETE http://localhost:8000/api/exams/exams/1/remove_question/
Content-Type: application/json
Authorization: Bearer YOUR_TOKEN_HERE

{
  "question_id": 1
}

# ========================================
# EXAM QUESTION RELATIONSHIPS
# ========================================

# 21. Get All Exam-Question Relationships
GET http://localhost:8000/api/exams/exam-questions/
Authorization: Bearer YOUR_TOKEN_HERE

# 22. Get Exam-Question Relationships for Specific Exam
GET http://localhost:8000/api/exams/exam-questions/?exam_id=1
Authorization: Bearer YOUR_TOKEN_HERE

# 23. Create Exam-Question Relationship
POST http://localhost:8000/api/exams/exam-questions/
Content-Type: application/json
Authorization: Bearer YOUR_TOKEN_HERE

{
  "exam": 1,
  "question": 1,
  "order": 1
}

# 24. Update Exam-Question Relationship
PUT http://localhost:8000/api/exams/exam-questions/1/
Content-Type: application/json
Authorization: Bearer YOUR_TOKEN_HERE

{
  "exam": 1,
  "question": 1,
  "order": 2
}

# 25. Delete Exam-Question Relationship
DELETE http://localhost:8000/api/exams/exam-questions/1/
Authorization: Bearer YOUR_TOKEN_HERE

# ========================================
# USER PROFILE ENDPOINTS
# ========================================

# 26. Get User Profile
GET http://localhost:8000/api/auth/profile/
Authorization: Bearer YOUR_TOKEN_HERE

# 27. Update User Profile
PUT http://localhost:8000/api/auth/profile/
Content-Type: application/json
Authorization: Bearer YOUR_TOKEN_HERE

{
  "first_name": "Updated",
  "last_name": "Name",
  "email": "updated@email.com"
}

# 28. Logout
POST http://localhost:8000/api/auth/logout/
Content-Type: application/json
Authorization: Bearer YOUR_TOKEN_HERE

{
  "refresh_token": "YOUR_REFRESH_TOKEN_HERE"
}

# ========================================
# TESTING SEQUENCE
# ========================================

# Step 1: Authentication
# Run: Register Instructor (1)
# Run: Login Instructor (3)

# Step 2: Create Questions
# Run: Create True/False Question (5)
# Run: Create True/False Question Alternative (6)
# Run: Create Multiple Choice with Custom Choices (7)
# Run: Create Multiple Choice with True/False as Options (8)
# Run: Create Question with Default True/False (9)

# Step 3: Create Exams
# Run: Create Exam (13)

# Step 4: Add Questions to Exams
# Run: Add Question to Exam (19)
# Run: Remove Question from Exam (20)

# Step 5: Test Retrieval
# Run: Get All Exams (14)
# Run: Get Exam Details (15)
# Run: Get Questions for an Exam (18)
# Run: Get Question Details (10)

# ========================================
# NOTES
# ========================================

# True/False Question Detection:
# The system automatically detects True/False questions when the text contains phrases like:
# - "Is this the answer is either True or False?"
# - "Is the answer True or False?"
# - "Is this True or False?"
# - "True or False?"
# - And many other variations

# When a True/False question is detected, the system automatically creates:
# - Choice 1: "True" (correct)
# - Choice 2: "False" (incorrect)

# For other questions, you can:
# - Provide custom choices (including True/False as options)
# - Let the system create default True/False choices if none provided
# - Have as many choices as you want 